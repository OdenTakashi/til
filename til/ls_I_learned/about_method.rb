# 定数化させる必要がある変数はグローバルで使う必要のあるもの
# グローバル変数は使うべきではない（よっぽどのことがない限り）
# 命名に関してはこだわるべき

# このようなコードは
case get_file.size % 3
when 1
	2.times do
		get_file.push(nil)
	end
when 2
	get_file.push(nil)
end

# このようにすべき
(3 - get_file.size % 3).times do
  get_file.push(nil)
end

# out_puts という英語はない気がするので、 output などちゃんとした英単語にしたほうがよい
# 一旦全体でやりたいことを言葉で書き出してみて、対応するように処理を書いていくとメソッドの整理がしやすい
# こちらも gets_argument で出力までやっているのは名前とやっていることが違うかなーと思いますので考える
# わかりにくいので、メソッド名をもうちょっとわかりやすくできるとよい
# 何かの操作をするメソッドは単数形の動詞が多い
# インスタンス変数はクラスのインスタンスの状態をあらわすのに使いますが、このようにクラス外で使うことは理由がない限りあまりやらない
# 他のメソッドにわたしたい場合は一旦メソッドの返り値として返してみて
# メソッドとして抽象化する利点としては、
	#処理を意味の単位で一個抽象的な処理としてまとめられる
	#タイプ数が減らせる
	#メソッドの中身の処理が変わってもメソッドの入出力が同じならメソッドを呼び出す側は変更が不要
# コメントで補足ができるだけ必要ないようなメソッド名
# 何をしているのかわからない名前は一般的にアンチパターン
# 詳細をしらなくてもなんとなくこんなことしていそう、ということがわかるような名前をつけるようにするとよい
# そういった名前をつけづらい場合、メソッドの単位として適切ではない
# 抽象的な概念ごとにわけるようにして
# ローカル変数は「モノ」をあらわすことが多いので、名詞を使うことが多い
# 同じ処理を何回も行う場合はローカル変数として保持すべき
# メソッドはできるだけひとつの言葉(動作)であらわす
# 分岐箇所は最小限にする
# 呼び出す度に結果がかわるものではないメソッドを何度も呼び出すのは基本的にあまりやらない
# グローバルに使う数値などは定数として定義することが多い
# 瑣末なことなので、特にメソッド名にいれる必要はない
# globの結果ってArrayになると思うので、 filenames など複数形の変数名のほうがよさそう

# BAD
def method_a
aaa = # 何か処理
method_b(aaa)
end

def method_b
bbb = # 何か処理
method_c
end
# GOOD
def method_a
  method_a_1
  method_a_2
end

def method_a_1
  method_a_1_i
  method_a_1_ii
end
# やりたいことを同レベルの抽象度でまずは日本語で書いてみるといい
# 「nilを挿入して何をしたいのか？」を考えたほうがいい
# グローバル変数はバグの元なので、よっぽど必要な理由がない限りは使わない
# mainはこういった何かしらの処理をするスクリプトの最初に実行されるメソッド名としてよく使われるものなので、
#プログラミングに慣れている人なら、ここがスタートなんだ、ということを察することができます。